properties([pipelineTriggers([githubPush()])])

node { git url: 'https://github.com/khajdari/AthTech-DevOps-toDoAppWithLogin.git', branch: 'master'}

pipeline{
    agent any
    
    environment{
        applicationHostIp  = 'hostIp'
        configurationManagerIp = 'ansibleIp'
        adminUser = 'cicdadmin'
    }

    stages{
        stage("Check azure cloud connectivity"){
            steps{
                script {
                    sh "az account show"
                }
            }
        }
        stage("Compile project"){
            steps{
                 dir("/var/lib/jenkins/workspace/test-pipeline/AthTech-DevOps-toDoAppWithLogin"){
                        sh "mvn clean compile"
                }
            }
        }
        stage("Testing project"){
            steps{
                 dir("/var/lib/jenkins/workspace/test-pipeline/AthTech-DevOps-toDoAppWithLogin"){
                        sh "mvn test"
                 }
            }
        }
        stage("Packaging archive"){
            steps{
                 dir("/var/lib/jenkins/workspace/test-pipeline/AthTech-DevOps-toDoAppWithLogin"){
                        sh "mvn package"
                 }
            }
        }
        stage("Create applcication host docker image"){
            steps{
                script{
                    dir("/var/lib/jenkins/workspace/test-pipeline/AthTech-DevOps-toDoAppWithLogin"){
                        sh "docker build -t ghaidaris/ccp6419-application-host-image ."
                    }
                }
            }
        }
        stage("Push applcication host docker image to dockerhub"){
            steps{
                script{
                    sh "docker push ghaidaris/ccp6419-application-host-image"
                }
            
            }
        }
        stage("Reset docker state on automation server"){
            steps{
                script{
                    sh "docker rmi ghaidaris/ccp6419-application-host-image"
                }
                script{
                    sh """docker rmi -f \$(docker images -a -q)"""
                }
            }
        }
        stage("Retrieve application host public ip"){
            steps{
                script{
                    applicationHostIp = sh(script: "az vm show -d -g ccp6419-application-host -n ccp6419-application-host-vm --query publicIps -o tsv", returnStdout: true).trim()
                }
            }
        }
        stage("Retrieve configuration manager public ip"){
            steps{
                script{
                    configurationManagerIp = sh(script: "az vm show -d -g ccp6419-configuration-server -n ccp6419-configuration-server-vm --query publicIps -o tsv", returnStdout: true).trim()
                }
            }
        }
        stage("Destroy docker images to existing application host"){
            steps{
                script{
                    def destroyAppToHostCommand = "sshpass -p user ssh -T -o StrictHostKeyChecking=no user@tmpIp ansible-playbook /home/cicdadmin/ccp6419-configuration-manager-resources/destroy_images_from_host.yml"
                    destroyAppToHostCommand = destroyAppToHostCommand.replace('user',"${adminUser}")
                    destroyAppToHostCommand = destroyAppToHostCommand.replace('tmpIp',"${configurationManagerIp}")
                    sh destroyAppToHostCommand

                }
            }
        }
        stage("Deploy docker images to existing application host"){
            steps{
                script{
                    def deployAppToHostCommand = "sshpass -p user ssh -T -o StrictHostKeyChecking=no user@tmpIp ansible-playbook /home/cicdadmin/ccp6419-configuration-manager-resources/deploy_images_to_host.yml"
                    deployAppToHostCommand = deployAppToHostCommand.replace('user',"${adminUser}")
                    deployAppToHostCommand = deployAppToHostCommand.replace('tmpIp',"${configurationManagerIp}")
                    sh deployAppToHostCommand

                }
            }
        }
    }
}